import streamlit as st
import pandas as pd
import numpy as np
import pickle
import joblib
from catboost import CatBoostRegressor
from io import StringIO
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    page_icon="üè†",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üè† –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ King County")
st.markdown("---")

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
@st.cache_resource  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
def load_models():
    models = {}
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö 6 –º–æ–¥–µ–ª–µ–π
        with open('models/linear_regression.pkl', 'rb') as f:
            models['Linear Regression'] = pickle.load(f)
        
        models['Gradient Boosting'] = joblib.load('models/gradient_boosting.joblib')
        models['Bagging'] = joblib.load('models/bagging.joblib')
        models['Stacking'] = joblib.load('models/stacking.joblib')
        
        models['CatBoost'] = CatBoostRegressor().load_model('models/catboost.cbm')
        models['Neural Network'] = joblib.load('models/mlp.joblib')
        
        st.success("–í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return models
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return None

models = load_models()

if not models:
    st.stop()

# 2. –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("1. –°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
input_method = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
    ["–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª", "–†—É—á–Ω–æ–π –≤–≤–æ–¥"],
    horizontal=True
)

X_input = None

if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª":
    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", 
        type=['csv']
    )
    
    if uploaded_file:
        try:
            X_input = pd.read_csv(uploaded_file)
            X_input = X_input.drop('price', axis=1)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü City, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if 'City' in X_input.columns:
                X_input = X_input.drop('City', axis=1)
            
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.dataframe(X_input.head())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            expected_cols = [
                'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 
                'condition', 'grade', 'sqft_above', 'sqft_basement', 
                'yr_built', 'yr_renovated', 'sqft_living15', 'sqft_lot15',
                'day_posted', 'month_posted', 'year_posted'
            ]
            
            missing_cols = set(expected_cols) - set(X_input.columns)
            if missing_cols:
                st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")
                X_input = None
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            X_input = None

else:
    # 4. –§–æ—Ä–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    st.header("2. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    col1, col2, col3 = st.columns(3)
    
    with col1:
        bedrooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω", min_value=1, max_value=15, value=3)
        bathrooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö", min_value=1.0, max_value=10.0, value=2.0, step=0.5)
        sqft_living = st.number_input("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.—Ñ—É—Ç—ã)", min_value=300, max_value=15000, value=2000)
    
    with col2:
        sqft_lot = st.number_input("–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–∫–≤.—Ñ—É—Ç—ã)", min_value=500, max_value=1000000, value=5000)
        floors = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π", min_value=1.0, max_value=5.0, value=1.5, step=0.5)
        condition = st.selectbox("–°–æ—Å—Ç–æ—è–Ω–∏–µ", options=[1, 2, 3, 4, 5], index=2)
    
    with col3:
        grade = st.selectbox("–ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", options=list(range(1, 14)), index=7)
        sqft_above = st.number_input("–ü–ª–æ—â–∞–¥—å –Ω–∞–¥ –∑–µ–º–ª–µ–π (–∫–≤.—Ñ—É—Ç—ã)", min_value=300, max_value=10000, value=1500)
        sqft_basement = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–¥–≤–∞–ª–∞ (–∫–≤.—Ñ—É—Ç—ã)", min_value=0, max_value=5000, value=500)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    col4, col5, col6 = st.columns(3)
    
    with col4:
        yr_built = st.number_input("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", min_value=1900, max_value=2023, value=1990)
        yr_renovated = st.number_input("–ì–æ–¥ —Ä–µ–º–æ–Ω—Ç–∞ (0 –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)", min_value=0, max_value=2023, value=0)
    
    with col5:
        sqft_living15 = st.number_input("–°—Ä–µ–¥–Ω—è—è –∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å —Å–æ—Å–µ–¥–µ–π (–∫–≤.—Ñ—É—Ç—ã)", min_value=300, max_value=10000, value=2000)
        sqft_lot15 = st.number_input("–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ —Å–æ—Å–µ–¥–µ–π (–∫–≤.—Ñ—É—Ç—ã)", min_value=500, max_value=1000000, value=5000)
    
    with col6:
        day_posted = st.number_input("–î–µ–Ω—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", min_value=1, max_value=31, value=15)
        month_posted = st.number_input("–ú–µ—Å—è—Ü –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", min_value=1, max_value=12, value=6)
        year_posted = st.number_input("–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", min_value=1900, max_value=2023, value=2015)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–≤–æ–¥ –≤ DataFrame
    X_input = pd.DataFrame([[
        bedrooms, bathrooms, sqft_living, sqft_lot, floors,
        condition, grade, sqft_above, sqft_basement,
        yr_built, yr_renovated, sqft_living15, sqft_lot15,
        day_posted, month_posted, year_posted
    ]], columns=[
        'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors',
        'condition', 'grade', 'sqft_above', 'sqft_basement',
        'yr_built', 'yr_renovated', 'sqft_living15', 'sqft_lot15',
        'day_posted', 'month_posted', 'year_posted'
    ])
    
    st.success("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é!")
    st.dataframe(X_input)

# 5. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
if X_input is not None:
    st.header("3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
        options=list(models.keys())
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    show_details = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
            try:
                model = models[model_name]
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                start_time = time.time()
                prediction = abs(model.predict(X_input))
                prediction_time = time.time() - start_time
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.success("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                
                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.markdown(f"""
                ### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
                **–ú–æ–¥–µ–ª—å:** {model_name}  
                **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {prediction_time:.4f} —Å–µ–∫—É–Ω–¥  
                **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ –¥–æ–º–∞:**  
                """)
                
                # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                st.markdown(f"""
                <div style="
                    background: #f0f2f6;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 10px 0;
                    text-align: center;
                ">
                    <h2 style="color: #ff4b4b;">${prediction[0]:,.2f}</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
                if show_details:
                    st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                    
                    if hasattr(model, 'feature_importances_'):
                        st.markdown("**–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:**")
                        importances = pd.DataFrame({
                            '–ü—Ä–∏–∑–Ω–∞–∫': X_input.columns,
                            '–í–∞–∂–Ω–æ—Å—Ç—å': model.feature_importances_
                        }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)
                        
                        st.dataframe(importances)
                    
                    st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                    st.dataframe(X_input)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# 6. –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
st.markdown("---")
st.header("üìå –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")

example_tab1, example_tab2 = st.tabs(["–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–î–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏"])

with example_tab1:
    st.markdown("""
    ### –ü—Ä–∏–º–µ—Ä 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ```python
    bedrooms = 3
    bathrooms = 2.5
    sqft_living = 2500
    sqft_lot = 6000
    floors = 2.0
    condition = 3
    grade = 8
    sqft_above = 2000
    sqft_basement = 500
    yr_built = 1995
    yr_renovated = 2010
    sqft_living15 = 2400
    sqft_lot15 = 6500
    day_posted = 15
    month_posted = 5
    year_posted = 2015
    ```
    """)
    st.markdown("**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** –¶–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $400,000 - $600,000")

with example_tab2:
    st.markdown("""
    ### –ü—Ä–∏–º–µ—Ä 2: –î–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
    ```python
    bedrooms = 20
    bathrooms = 10.0
    sqft_living = 50000
    sqft_lot = 1000000
    floors = 10.0
    condition = 5
    grade = 13
    sqft_above = 50000
    sqft_basement = 0
    yr_built = 2025
    yr_renovated = 0
    sqft_living15 = 50000
    sqft_lot15 = 1000000
    day_posted = 32
    month_posted = 13
    year_posted = 2025
    ```
    """)
    st.markdown("**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")

st.markdown("---")
st.info("‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π.")
